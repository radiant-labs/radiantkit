{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/controller/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAC;AAEpD,MAAM,OAAO,iBAAiB;IAG1B,YAAY,UAAgC;QACxC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAW;QACrC,OAAO,IAAI,iBAAiB,CAAC,MAAM,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,IAAY;QACrB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,UAAU,EAAE,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,MAAc,EAAE,QAAkB,EAAE,KAAe;QAC5D,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,EAAE,EAAE,MAAM;gBACV,QAAQ;gBACR,KAAK;aACR;SACJ,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,MAAc,EAAE,KAAe;QACxC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,EAAE,EAAE,MAAM;gBACV,UAAU,EAAE,KAAK;aACpB;SACJ,CAAC,CAAC;IACP,CAAC;IAED,cAAc,CAAC,MAAc,EAAE,KAAe;QAC1C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,cAAc,EAAE;gBACZ,EAAE,EAAE,MAAM;gBACV,YAAY,EAAE,KAAK;aACtB;SACJ,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { RadiantAppController } from \"radiant-wasm\";\n\nexport class RadiantController {\n    _controller: RadiantAppController;\n\n    constructor(controller: RadiantAppController) {\n        this._controller = controller;\n    }\n\n    static async createController(f: Function): Promise<RadiantController> {\n        return new RadiantController(await new RadiantAppController(f));   \n    }\n\n    /**\n     * Activates the provided tool.\n     *\n     * @param tool the tool to activate.\n     */\n    activateTool(tool: string) {\n        this._controller.handleMessage({\n            SelectTool: tool\n        });\n    }\n\n    setTransform(nodeId: number, position: number[], scale: number[]) {\n        this._controller.handleMessage({\n            SetTransform: {\n                id: nodeId,\n                position,\n                scale,\n            },\n        });\n    }\n\n    setFillColor(nodeId: number, color: number[]) {\n        this._controller.handleMessage({\n            SetFillColor: {\n                id: nodeId,\n                fill_color: color,\n            },\n        });\n    }\n\n    setStrokeColor(nodeId: number, color: number[]) {\n        this._controller.handleMessage({\n            SetStrokeColor: {\n                id: nodeId,\n                stroke_color: color,\n            },\n        });\n    }\n}"]}