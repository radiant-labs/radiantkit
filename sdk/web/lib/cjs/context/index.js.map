{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/context/index.tsx"],"names":[],"mappings":";;;;AAAA,uDAAsF;AACtF,wEAAgC;AAChC,2CAA+C;AAO/C,MAAM,cAAc,GAAG,IAAA,qBAAa,EAAe;IAC/C,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE,EAAE;CACf,CAAC,CAAC;AAEH,SAAS,eAAe,CAAC,EAAE,QAAQ,EAAO;IACtC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAA2B,IAAI,CAAC,CAAC;IAC7E,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAM,EAAE,CAAC,CAAC;IAElD,MAAM,QAAQ,GAAG,GAAS,EAAE;QACxB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACjC,IAAI;YACA,MAAM,IAAA,sBAAI,GAAE,CAAC;YACb,IAAI,UAAU,GAAG,MAAM,8BAAiB,CAAC,gBAAgB,CAAC,CAAC,OAAY,EAAE,EAAE;gBACvE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,WAAW,CAAC,OAAO,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,aAAa,CAAC,UAAU,CAAC,CAAC;SAC7B;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACtB;IACL,CAAC,CAAA,CAAC;IAEF,MAAM,CAAC,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,CAAC,CAAC;IACpC,MAAM,OAAO,GAAG,IAAA,cAAM,EAAS,CAAC,CAAC,CAAC;IAClC,MAAM,YAAY,GAAG,IAAA,cAAM,EAAU,KAAK,CAAC,CAAC;IAE5C,IAAA,iBAAS,EAAC,GAAG,EAAE;QACX,IAAI,YAAY,CAAC,OAAO;YAAE,OAAO;QACjC,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;QACrB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7B,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;QAC5B,QAAQ,EAAE,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACH,8BAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE;YAC5B,UAAU;YACV,QAAQ;SACX,IACI,QAAQ,CACa,CAC7B,CAAA;AACL,CAAC;AAMQ,0CAAe;AAJxB,MAAM,oBAAoB,GAAG,GAAG,EAAE;IAC9B,OAAO,IAAA,kBAAU,EAAC,cAAc,CAAC,CAAC;AACtC,CAAC,CAAA;AAEyB,oDAAoB","sourcesContent":["import React, { useState, createContext, useEffect, useRef, useContext } from \"react\";\nimport init from \"radiant-wasm\";\nimport { RadiantController } from \"controller\";\n\nexport interface RadiantState {\n    controller: RadiantController | null;\n    response: any;\n}\n\nconst RadiantContext = createContext<RadiantState>({\n    controller: null,\n    response: {},\n});\n\nfunction RadiantProvider({ children }: any) {\n    const [controller, setController] = useState<RadiantController | null>(null);\n    const [response, setResponse] = useState<any>({});\n\n    const initWasm = async () => {\n        console.log(\"Initializing wasm\");\n        try {\n            await init();\n            let controller = await RadiantController.createController((message: any) => {\n                console.log(message);\n                setResponse(message);\n            });\n            setController(controller);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const [, setTimesRun] = useState(0);\n    const counter = useRef<number>(0);\n    const effectCalled = useRef<boolean>(false);\n\n    useEffect(() => {\n        if (effectCalled.current) return;\n        counter.current += 1;\n        setTimesRun(counter.current);\n        effectCalled.current = true;\n        initWasm();\n    }, []);\n\n    return (\n        <RadiantContext.Provider value={{\n            controller,\n            response,\n        }}>\n            {children}\n        </RadiantContext.Provider>\n    )\n}\n\nconst useCurrentController = () => {\n    return useContext(RadiantContext);\n}\n\nexport { RadiantProvider, useCurrentController };\n"]}