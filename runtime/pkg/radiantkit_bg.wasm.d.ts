/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_radiantkitappcontroller_free(a: number): void;
export function radiantkitappcontroller_new(a: number, b: number, c: number, d: number, e: number): number;
export function radiantkitappcontroller_handleMessage(a: number, b: number): void;
export function __wbg_radiantpathnode_free(a: number): void;
export function __wbg_get_radiantpathnode_id(a: number): number;
export function __wbg_set_radiantpathnode_id(a: number, b: number): void;
export function __wbg_get_radiantpathnode_transform(a: number): number;
export function __wbg_set_radiantpathnode_transform(a: number, b: number): void;
export function __wbg_get_radiantpathnode_selection(a: number): number;
export function __wbg_set_radiantpathnode_selection(a: number, b: number): void;
export function __wbg_radiantimagenode_free(a: number): void;
export function __wbg_get_radiantimagenode_id(a: number): number;
export function __wbg_set_radiantimagenode_id(a: number, b: number): void;
export function __wbg_get_radiantimagenode_transform(a: number): number;
export function __wbg_set_radiantimagenode_transform(a: number, b: number): void;
export function __wbg_get_radiantimagenode_selection(a: number): number;
export function __wbg_set_radiantimagenode_selection(a: number, b: number): void;
export function __wbg_get_radiantimagenode_tint(a: number): number;
export function __wbg_set_radiantimagenode_tint(a: number, b: number): void;
export function __wbg_radianttextnode_free(a: number): void;
export function __wbg_get_radianttextnode_id(a: number): number;
export function __wbg_set_radianttextnode_id(a: number, b: number): void;
export function __wbg_get_radianttextnode_transform(a: number): number;
export function __wbg_set_radianttextnode_transform(a: number, b: number): void;
export function __wbg_get_radianttextnode_selection(a: number): number;
export function __wbg_set_radianttextnode_selection(a: number, b: number): void;
export function __wbg_get_radianttextnode_color(a: number): number;
export function __wbg_set_radianttextnode_color(a: number, b: number): void;
export function __wbg_radiantrectanglenode_free(a: number): void;
export function __wbg_get_radiantrectanglenode_id(a: number): number;
export function __wbg_set_radiantrectanglenode_id(a: number, b: number): void;
export function __wbg_get_radiantrectanglenode_transform(a: number): number;
export function __wbg_set_radiantrectanglenode_transform(a: number, b: number): void;
export function __wbg_get_radiantrectanglenode_selection(a: number): number;
export function __wbg_set_radiantrectanglenode_selection(a: number, b: number): void;
export function __wbg_get_radiantrectanglenode_color(a: number): number;
export function __wbg_set_radiantrectanglenode_color(a: number, b: number): void;
export function radiantrectanglenode_new_wasm(a: number, b: number, c: number): number;
export function __wbg_selectioncomponent_free(a: number): void;
export function __wbg_transformcomponent_free(a: number): void;
export function transformcomponent_transform_xy(a: number, b: number): void;
export function transformcomponent_transform_scale(a: number, b: number): void;
export function transformcomponent_set_position(a: number, b: number): void;
export function transformcomponent_set_scale(a: number, b: number): void;
export function transformcomponent_set_rotation(a: number, b: number): void;
export function transformcomponent_position(a: number): number;
export function transformcomponent_scale(a: number): number;
export function transformcomponent_get_rotation(a: number): number;
export function __wbg_colorcomponent_free(a: number): void;
export function __wbg_vec3_free(a: number): void;
export function __wbg_get_vec3_x(a: number): number;
export function __wbg_set_vec3_x(a: number, b: number): void;
export function __wbg_get_vec3_y(a: number): number;
export function __wbg_set_vec3_y(a: number, b: number): void;
export function __wbg_get_vec3_z(a: number): number;
export function __wbg_set_vec3_z(a: number, b: number): void;
export function vec3_zero(): number;
export function vec3_new(a: number, b: number, c: number): number;
export function vec3_new_with_min(a: number): number;
export function vec3_new_with_added(a: number, b: number): number;
export function vec3_add(a: number, b: number): void;
export function vec3_add_with_min(a: number, b: number, c: number): void;
export function vec3_add_scalar(a: number, b: number): void;
export function vec3_set_with_min(a: number, b: number, c: number): void;
export function __wbg_radiantlinenode_free(a: number): void;
export function __wbg_get_radiantlinenode_id(a: number): number;
export function __wbg_set_radiantlinenode_id(a: number, b: number): void;
export function __wbg_get_radiantlinenode_start(a: number): number;
export function __wbg_set_radiantlinenode_start(a: number, b: number): void;
export function __wbg_get_radiantlinenode_end(a: number): number;
export function __wbg_set_radiantlinenode_end(a: number, b: number): void;
export function __wbg_get_radiantlinenode_transform(a: number): number;
export function __wbg_set_radiantlinenode_transform(a: number, b: number): void;
export function __wbg_get_radiantlinenode_selection(a: number): number;
export function __wbg_set_radiantlinenode_selection(a: number, b: number): void;
export function wgpu_compute_pass_set_pipeline(a: number, b: number): void;
export function wgpu_compute_pass_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_compute_pass_set_push_constant(a: number, b: number, c: number, d: number): void;
export function wgpu_compute_pass_insert_debug_marker(a: number, b: number, c: number): void;
export function wgpu_compute_pass_push_debug_group(a: number, b: number, c: number): void;
export function wgpu_compute_pass_pop_debug_group(a: number): void;
export function wgpu_compute_pass_write_timestamp(a: number, b: number, c: number): void;
export function wgpu_compute_pass_begin_pipeline_statistics_query(a: number, b: number, c: number): void;
export function wgpu_compute_pass_end_pipeline_statistics_query(a: number): void;
export function wgpu_compute_pass_dispatch_workgroups(a: number, b: number, c: number, d: number): void;
export function wgpu_compute_pass_dispatch_workgroups_indirect(a: number, b: number, c: number): void;
export function wgpu_render_bundle_set_pipeline(a: number, b: number): void;
export function wgpu_render_bundle_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_vertex_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_push_constants(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_draw(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_draw_indexed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_bundle_draw_indirect(a: number, b: number, c: number): void;
export function wgpu_render_bundle_draw_indexed_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_set_pipeline(a: number, b: number): void;
export function wgpu_render_pass_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_vertex_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_push_constants(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_draw(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_draw_indexed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_draw_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_draw_indexed_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_multi_draw_indirect(a: number, b: number, c: number, d: number): void;
export function wgpu_render_pass_multi_draw_indexed_indirect(a: number, b: number, c: number, d: number): void;
export function wgpu_render_pass_multi_draw_indirect_count(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_multi_draw_indexed_indirect_count(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_set_blend_constant(a: number, b: number): void;
export function wgpu_render_pass_set_scissor_rect(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_viewport(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function wgpu_render_pass_set_stencil_reference(a: number, b: number): void;
export function wgpu_render_pass_insert_debug_marker(a: number, b: number, c: number): void;
export function wgpu_render_pass_push_debug_group(a: number, b: number, c: number): void;
export function wgpu_render_pass_pop_debug_group(a: number): void;
export function wgpu_render_pass_write_timestamp(a: number, b: number, c: number): void;
export function wgpu_render_pass_begin_pipeline_statistics_query(a: number, b: number, c: number): void;
export function wgpu_render_pass_end_pipeline_statistics_query(a: number): void;
export function wgpu_render_pass_execute_bundles(a: number, b: number, c: number): void;
export function wgpu_render_bundle_set_index_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_pop_debug_group(a: number): void;
export function wgpu_render_bundle_insert_debug_marker(a: number, b: number): void;
export function wgpu_render_bundle_push_debug_group(a: number, b: number): void;
export function wgpu_render_pass_set_index_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hcdb301ba96475d9e(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0aed65c4bd670abd(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1a68760c989ce7c3(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h206ecff7fb3d562a(a: number, b: number, c: number): void;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h7feb6432b025df08(a: number, b: number, c: number, d: number): void;
