{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/controller/index.ts"],"names":[],"mappings":";;;;AAAA,qDAAuD;AAEvD,MAAa,iBAAiB;IAG1B,YAAY,UAAgC;QACxC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,MAAM,CAAO,gBAAgB,CAAC,CAAW;;YACrC,OAAO,IAAI,iBAAiB,CAAC,MAAM,IAAI,sCAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,CAAC;KAAA;IAED;;;;OAIG;IACH,YAAY,CAAC,MAAc;QACvB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,UAAU,EAAG;oBACT,EAAE,EAAE,MAAM;iBACb;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,QAAkB,EAAE,KAAe;QAC5C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,QAAQ;gBACR,KAAK;aACR;SACJ,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,IAAY,EAAE,OAAe,EAAE,EAAE,WAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,QAAiB,CAAC,GAAG,EAAE,GAAG,CAAC;QAClG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,QAAQ,EAAE;gBACN,IAAI;gBACJ,IAAI;aACP;SACJ,CAAC,CAAC;IACP,CAAC;IAED,OAAO,CAAC,IAAY,EAAE,WAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,QAAiB,CAAC,GAAG,EAAE,GAAG,CAAC;QAC9E,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,OAAO,EAAE;gBACL,IAAI;gBACJ,QAAQ;aACX;SACJ,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,MAAc,EAAE,QAAkB,EAAE,KAAe;QAC5D,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,YAAY,EAAE;oBACV,EAAE,EAAE,MAAM;oBACV,QAAQ;oBACR,KAAK;iBACR;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,MAAc,EAAE,KAAe;QACxC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,YAAY,EAAE;oBACV,EAAE,EAAE,MAAM;oBACV,UAAU,EAAE,KAAK;iBACpB;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAED,cAAc,CAAC,MAAc,EAAE,KAAe;QAC1C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAC3B,YAAY,EAAE;gBACV,cAAc,EAAE;oBACZ,EAAE,EAAE,MAAM;oBACV,YAAY,EAAE,KAAK;iBACtB;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;CACJ;AAtFD,8CAsFC","sourcesContent":["import { RadiantAppController } from \"radiant-runtime\";\n\nexport class RadiantController {\n    _controller: RadiantAppController;\n\n    constructor(controller: RadiantAppController) {\n        this._controller = controller;\n    }\n\n    static async createController(f: Function): Promise<RadiantController> {\n        return new RadiantController(await new RadiantAppController(f));   \n    }\n\n    /**\n     * Activates the provided tool.\n     *\n     * @param tool the tool to activate.\n     */\n    activateTool(toolId: number) {\n        this._controller.handleMessage({\n            SceneMessage: {\n                SelectTool:  {\n                    id: toolId,\n                },\n            },\n        });\n    }\n\n    addRectangle(position: number[], scale: number[]) {\n        this._controller.handleMessage({\n            AddRectangle: {\n                position,\n                scale,\n            },\n        });\n    }\n\n    addImage(path: string, name: string = \"\", position: number[] = [100, 100], scale: number[] =[100, 100]) {\n        this._controller.handleMessage({\n            AddImage: {\n                name,\n                path,\n            },\n        });\n    }\n\n    addText(text: string, position: number[] = [100, 100], scale: number[] =[100, 100]) {\n        this._controller.handleMessage({\n            AddText: {\n                text,\n                position,\n            },\n        });\n    }\n\n    setTransform(nodeId: number, position: number[], scale: number[]) {\n        this._controller.handleMessage({\n            SceneMessage: {\n                SetTransform: {\n                    id: nodeId,\n                    position,\n                    scale,\n                },\n            },\n        });\n    }\n\n    setFillColor(nodeId: number, color: number[]) {\n        this._controller.handleMessage({\n            SceneMessage: {\n                SetFillColor: {\n                    id: nodeId,\n                    fill_color: color,\n                },\n            },\n        });\n    }\n\n    setStrokeColor(nodeId: number, color: number[]) {\n        this._controller.handleMessage({\n            SceneMessage: {\n                SetStrokeColor: {\n                    id: nodeId,\n                    stroke_color: color,\n                },\n            },\n        });\n    }\n}"]}